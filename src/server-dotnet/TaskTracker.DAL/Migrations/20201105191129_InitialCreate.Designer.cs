// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskTracker.DAL;

namespace TaskTracker.DAL.Migrations
{
    [DbContext(typeof(TaskTrackerContext))]
    [Migration("20201105191129_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskTracker.Models.Classification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("Classifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            DateCreated = new DateTime(2020, 11, 6, 3, 11, 28, 372, DateTimeKind.Local).AddTicks(8138),
                            DateModified = new DateTime(2020, 11, 6, 3, 11, 28, 372, DateTimeKind.Local).AddTicks(8138),
                            IsActive = true,
                            ModifiedBy = 0,
                            Name = "Backlog"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            DateCreated = new DateTime(2020, 11, 6, 3, 11, 28, 372, DateTimeKind.Local).AddTicks(8138),
                            DateModified = new DateTime(2020, 11, 6, 3, 11, 28, 372, DateTimeKind.Local).AddTicks(8138),
                            IsActive = true,
                            ModifiedBy = 0,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 0,
                            DateCreated = new DateTime(2020, 11, 6, 3, 11, 28, 372, DateTimeKind.Local).AddTicks(8138),
                            DateModified = new DateTime(2020, 11, 6, 3, 11, 28, 372, DateTimeKind.Local).AddTicks(8138),
                            IsActive = true,
                            ModifiedBy = 0,
                            Name = "Closed"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 0,
                            DateCreated = new DateTime(2020, 11, 6, 3, 11, 28, 372, DateTimeKind.Local).AddTicks(8138),
                            DateModified = new DateTime(2020, 11, 6, 3, 11, 28, 372, DateTimeKind.Local).AddTicks(8138),
                            IsActive = true,
                            ModifiedBy = 0,
                            Name = "Archived"
                        });
                });

            modelBuilder.Entity("TaskTracker.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            DateCreated = new DateTime(2020, 11, 6, 3, 11, 28, 372, DateTimeKind.Local).AddTicks(8138),
                            DateModified = new DateTime(2020, 11, 6, 3, 11, 28, 372, DateTimeKind.Local).AddTicks(8138),
                            IsActive = true,
                            ModifiedBy = 0,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            DateCreated = new DateTime(2020, 11, 6, 3, 11, 28, 372, DateTimeKind.Local).AddTicks(8138),
                            DateModified = new DateTime(2020, 11, 6, 3, 11, 28, 372, DateTimeKind.Local).AddTicks(8138),
                            IsActive = true,
                            ModifiedBy = 0,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("TaskTracker.Models.Sprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Sprints");
                });

            modelBuilder.Entity("TaskTracker.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActualHours")
                        .HasColumnType("int");

                    b.Property<int>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("ExpectedHours")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("SprintId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("SprintId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TaskTracker.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            DateCreated = new DateTime(2020, 11, 6, 3, 11, 28, 372, DateTimeKind.Local).AddTicks(8138),
                            DateModified = new DateTime(2020, 11, 6, 3, 11, 28, 372, DateTimeKind.Local).AddTicks(8138),
                            IsActive = true,
                            ModifiedBy = 0,
                            Password = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            DateCreated = new DateTime(2020, 11, 6, 3, 11, 28, 372, DateTimeKind.Local).AddTicks(8138),
                            DateModified = new DateTime(2020, 11, 6, 3, 11, 28, 372, DateTimeKind.Local).AddTicks(8138),
                            IsActive = true,
                            ModifiedBy = 0,
                            Password = "04f8996da763b7a969b1028ee3007569eaf3a635486ddab211d512c85b9df8fb",
                            RoleId = 2,
                            Username = "user"
                        });
                });

            modelBuilder.Entity("TaskTracker.Models.Task", b =>
                {
                    b.HasOne("TaskTracker.Models.Classification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskTracker.Models.Sprint", "Sprint")
                        .WithMany("Tasks")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskTracker.Models.User", b =>
                {
                    b.HasOne("TaskTracker.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
